Create the database ecommerce:
CREATE DATABASE ecommerce;

Create the customers table:
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    address TEXT NOT NULL
);

Create the products table:
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT NOT NULL
);

Create the orders table:
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);


1. Insert data into the customers table:

INSERT INTO customers (name, email, address)
VALUES 
('John Doe', 'john@example.com', '123 Main St, City, Country'),
('Jane Smith', 'jane@example.com', '456 Oak St, City, Country'),
('Michael Brown', 'michael@example.com', '789 Pine St, City, Country');

2. Insert data into the products table:

INSERT INTO products (name, price, description)
VALUES 
('Product A', 50.00, 'Description of Product A'),
('Product B', 30.00, 'Description of Product B'),
('Product C', 40.00, 'Description of Product C');

3. Insert data into the orders table:

INSERT INTO orders (customer_id, order_date, total_amount)
VALUES 
(1, '2024-11-01', 150.00),
(2, '2024-11-10', 200.00),
(3, '2024-11-20', 100.00);

SQL Queries
1. Retrieve all customers who have placed an order in the last 30 days:
SELECT DISTINCT c.name, c.email
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;
This query retrieves customers who have placed an order in the last 30 days. It joins the customers and orders tables and filters the results based on the order_date.

2. Get the total amount of all orders placed by each customer:
SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;
This query calculates the total amount of all orders placed by each customer. It sums the total_amount for each customer, grouped by the customer id.

3. Update the price of Product C to 45.00:
UPDATE products
SET price = 45.00
WHERE name = 'Product C';
This query updates the price of Product C to 45.00.

4. Add a new column discount to the products table:
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;
This query adds a discount column to the products table, setting the default value to 0.00.

5. Retrieve the top 3 products with the highest price:
SELECT name, price
FROM products
ORDER BY price DESC
LIMIT 3;
This query retrieves the top 3 products with the highest price by sorting the products table in descending order and limiting the results to 3.

6. Get the names of customers who have ordered Product A:
SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';
This query retrieves the names of customers who have ordered Product A by joining the customers, orders, order_items, and products tables.

7. Join the orders and customers tables to retrieve the customer's name and order date for each order:
SELECT c.name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.id;
This query retrieves the customer's name and the order date for each order by joining the orders and customers tables.

8. Retrieve orders with a total amount greater than 150.00:
SELECT o.id, o.total_amount
FROM orders o
WHERE o.total_amount > 150.00;
This query retrieves all orders where the total_amount is greater than 150.00.

9. Normalize the database by creating an order_items table:
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);
This query creates an order_items table to store individual items in an order, linking it to the orders and products tables using foreign keys.

10. Retrieve the average total of all orders:
SELECT AVG(total_amount) AS average_order_value
FROM orders;
This query calculates the average total amount of all orders from the orders table.

